Java JDBC Overview

    - Qué es JDBC? -> Allows java applications to connect to a relational database
    - Features:
        - Provides protable access to various databases, so there is no need to develop code for different databases
        - Call level interface to the database. Supports ANSI SQL 2003
        - You can build your own custom SQL statements
            - select, insert, update, delete
            - Complex SQL queries: inner/outer joins
            - Call stored procedures
    - Databases supported:
        - JDBC supports a large number of databases
        - Oracle, DB2, MySQL, SQL Server, Postgres, etc
    - JDBC Architecture
        - JDBC Driver
            - Provides connection to a database
            - Converts JDBC calls to for specific database
        - JDBC Driver implementations
            - Provided by database vendor
    - JDBC Driver Manager
        - DriverManager helps to connect an application based on the database connection string
        - In JDBC 4.0, the JDBC drivers are automatically loaded based on the classpath
        - Legacy JDBC 3.0 drivers have to be explicitly loaded with Class.forName(theDriverName)
    - JDBC API
        - This is defined in the following packages:
            - java.sql
            - javax.sql
        - Key classes
            - java.sql.DriverManager
            - java.sql.connection
            - java.sql.Statement
            - java.sql.ResultSet
            - javax.sql.DataSource (for connection pooling)
    - Development Process
        - Get a connection to database
            - In order to connet to database, we need a connection string in form of JDBC URL
            - Basic sintax: jdbc:<driver protocol>:<driver connection details>
            - Examples:
                - MS SQL Server: jdbc:odbc:DemoDSN
                - Oracle: jdbc:thin@myserver:1521:demodb
                - MySQL: jdbc:mysql://localhost:3306/demodb

                String dbUrl = "jdbc:mysql://localhost:3306/demodb";
                String user = "student";
                String pass = "student";

                Connection myConn = DriverManager.getConnection(dbUrl, user, pass);

        - Create a Statement object
            - The statement object is based on connection, and it will be used later to execute SQL query
                String dbUrl = "jdbc:mysql://localhost:3306/demodb";
                String user = "student";
                String pass = "student";

                Connection myConn = DriverManager.getConnection(dbUrl, user, pass);

                Statement myStmt = myConn.createStatement(); -> Este es nuestro statement que nos va a permitir ejecutar las sentencias SQL
        - Execute SQL query
            - Pass in your SQL query:
            String dbUrl = "jdbc:mysql://localhost:3306/demodb";
            String user = "student";
            String pass = "student";

            Connection myConn = DriverManager.getConnection(dbUrl, user, pass);

            Statement myStmt = myConn.createStatement();

            ResultSet myRs = myStmt.executeQuery("select * from employees");
        - Process Result Set
            - ResultSet is initially placed before first row
            - Method: ResultSet.next()
                - moves forward one row
                - returns true if there are more rows to Process
            - Looping through a resultset:
                ResultSet myRs = myStmt.executeQuery("select * from employees");

                while (myRs.next()){
                    // Read data from each row
                }
            - Collection of methods for reading data:
                - getXXX(columnName);
                - getXXX(columnIndex) one-based
                ResultSet myRs = myStmt.executeQuery("select * from employees");

                while (myRs.next()){
                    System.out.println(myRs.getString("last_name"));
                    System.out.println(myRs.getString("first_name"));
                }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Database Setup Overview

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Create a new Database User in MySQL Workbench

    - Nos logueamos como Root en el MySQL Workbench
    - Nos vamos a la pestaña administration al lado de schemas
    - Users and Privileges -> Create a new User
    - Damos click en Add Account
    - le damos como login name: student, limit to hosts Matching: localhost, password: student
    - Nos vamos a la pestaña Administrative Rules, y le damos permisos de DBA
    - Click en apply y ya deberiamos tener una nueva cuenta creada

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Setting up the Develpment Environment

- Creamos la tabla employees desde el script: tablesetup.sql
- Ahora tenemos que
    - Descargar el JDBC driver: https://dev.mysql.com/downloads/connector/j/ -> descargamos el ZIP no el TAR
        - Descomprimimos la carpeta, y ubicamos el jar que existe allí

    - Configurar ese driver dentro de eclipse
        - Creamos un nuevo proyecto Java
        - Una vez creado, agregamos el JAR a nuestro proyecto:
            Open your installed IntelliJ IDEA Project and
            Go to the File > Project Structure
            Select Modules at the left panel and select the Dependencies tab.
            Select the + icon and select 1 JARs or Directories option.
            select your JAR file or you can select the directories.
            Click on the OK button
- Ahora vamos a crear un programa simple para probar la conexión JDBC
- Creamos una clase debajo de src llamada JDBCTest, con el siguiente método main:
     public static void main(String[] args) throws SQLException {

        Connection myConn = null;
        Statement myStmt = null;
        ResultSet myRs = null;

        try {
            // 1. Get a connection to database
            myConn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "student" , "student");

            System.out.println("Database connection successful!\n");

            // 2. Create a statement
            myStmt = myConn.createStatement();

            // 3. Execute SQL query
            myRs = myStmt.executeQuery("select * from employees");

            // 4. Process the result set
            while (myRs.next()) {
                System.out.println(myRs.getString("last_name") + ", " + myRs.getString("first_name"));
            }
        }
        catch (Exception exc) {
            exc.printStackTrace();
        }
        finally {
            if (myRs != null) {
                myRs.close();
            }

            if (myStmt != null) {
                myStmt.close();
            }

            if (myConn != null) {
                myConn.close();
            }
        }
    }